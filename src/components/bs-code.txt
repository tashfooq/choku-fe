
  const getSubChaptersByChapterId = async (chapterId: number) => {
    console.log(chapterId);
    const subChaps = await contentService.getSubChapters(chapterId);
    if (
      subChapters.filter((sC: any) => sC.chapter_id === chapterId).length !== 0
    ) {
      return;
    }
    setSubChapters((prev: any) => [...prev, ...subChaps]);
  };
  
  const recordCheckOrPasses = (
    itemId: number,
    items: (SubChapter | SubTopic)[],
    passes?: number
  ) => {
    const itemLookup = items.find((sC) => sC.id === itemId);
    if (itemLookup === undefined) {
      throw new TypeError("Item should always be there");
    }
    const item: SubChapter | SubTopic = itemLookup;
    const itemIdx = items.findIndex((sC) => sC.id === itemId);
    const deepFake: (SubChapter | SubTopic)[] = [...items];
    if (passes) {
      deepFake[itemIdx] = { ...item, passes };
      setSubChapters(deepFake);
      return;
    }
    if (Object.keys(item).includes("checked")) {
      deepFake[itemIdx] =
        item?.checked === true
          ? { ...item, checked: false }
          : { ...item, checked: true };
      setSubChapters(deepFake);
      return;
    }
    deepFake[itemIdx] = { ...item, checked: true };
    setSubChapters(deepFake);
  };
              
              {row.getIsExpanded() && (
                <tr>
                  {/* 2nd row is a custom 1 cell row */}
                  <td colSpan={row.getVisibleCells().length}>
                    {renderSubComponent({ row })}
                  </td>
                </tr>
              )}